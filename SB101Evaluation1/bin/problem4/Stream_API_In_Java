What are the features of Stream API in Java explain some of the intermediate
and terminal methods of Stream object with one example.

ANS:-
Stream API is used to process collections of objects. A stream is a sequence of objects that supports various 
methods which can be pipelined to produce the desired result.

Feature of the Stream:
		---------------=
1. A stream is not a data structure instead it takes input from the Collections, Arrays or I/O channels.
2. Streams donâ€™t change the original data structure, 
3. they only provide the result as per the pipelined methods.
4. Each intermediate operation is lazily executed and returns a stream as a result, 
hence various intermediate operations can be pipelined.


	

		

		--Collection Interface provides 2 methods to get a Stream(I) object.


		 public Stream<E> stream();
		 public Stream<E> parallelStream(); // this stream object is used in multithreaded application


		methods of this Stream(I) interface:
		=============================

		There are 2 types of methods in the Stream interface:

		1. intermediate methods
		2. terminal methods

		1. intermediate methods: these method returns a new Stream object instead of returning
		final output.

		--using these methods we can chain one stream object with another stream object.

		--these methods never gives the final output.

		--some of the commonly used intermediate methods are :

		map()
		filter()

		2. terminal method: stream object returns the final output only when we call the terminal methods.

		--these methods will consume the stream object also, and once a stream object is consumed then we can not 
		reuse that stream object once again.

		Note: if we try to use a consumed Stream object once again, then we will get a runtime
		exception.


		some of the commonly used terminal methods are:
		forEach(Consumer action)
		collect()
		min()
		max()
		get()
		anyMatch()
		AllMatch()
		count()

	